#!/bin/bash
__scriptVersion=1.1
__scriptPID=$$
__scriptPath="$(dirname "$0")"
__scriptFile="$(basename "$0")"

# Function ========================================================   
#           Name:  vnc
#         Author:  Rusty Gibbs 
#       Homepage:  http://www.wickedidol.com
#            Git:  https://github.com/fenchurch/dotfiles/bin
#    Description:  vnc
#        Created:  2018-04-12
#       Modified:  2020-10-28
# ================================================================= 

#Settings
CONFIG=~/.ssh/config
TIMEOUT=1
PORT=5900

HOST="${1##*@}"
CRED="${1%@*}"

join(){
    IFS="$1"; shift
    echo "$*"; 
}

array_value(){
    key=$1; shift
    echo "$*" | while read line; do 
        if [[ ${line%=*} == $key ]]; then
            echo ${line#*=}
            return
        fi
    done
}

known_hosts(){
    #Search for "Host", set h tofield 2
    awk '/Host / { h=$2; next}
        /host / && h!="" { h="" }
        /Host / && h!="" { h="" }
        /User/ && h!="" { u=$2 }
        /Hostname/ && h!="" {print h"="u"@"$2}' $CONFIG
}
known_host(){
    array_value "$1" "`known_hosts`"
}

test_host(){
    #function arguments
    timeout=$TIMEOUT
    port=$PORT
    while true ; do
        case "$1" in
        --port  |   -p ) port=$2; shift 2;;
        --timeout | -t ) timeout=$2; shift 2;;
        *) break;;
        esac
    done
    #echo -n "Testing host ." >&2
    #make arguments or stdin so it can be piped
    echo "${@:-$(</dev/stdin)}" | while read host; do
        #netcat the port to see if its open
        ( nc -G $timeout -z ${host#*@} $port &>- && echo "$host" ) &
    done
    sleep $timeout;
}

local_hosts(){
   known_hosts | test_host | sort
}

select_host(){
    echo "Looking up available VNC hosts based on .ssh/config hosts available in the network"
    echo
    PS3="Select a host (enter q or quit to cancel) : "
    #find the local hosts available
    select opt in `local_hosts | sed -e 's/=.*$//g'`; do
        case $REPLY in
        q|n|quit|cancel|exit)
            exit;;
        * )
            #lookup by selected option or the reply value
            hostO=$(known_host $opt)
            hostR=$(known_host $REPLY)
            #retry if invalid
            if [[ "$hostO" == "" && "$hostR" == "" ]]; then
                echo "Invalid answer, try again..."
            #
            elif [[ "$hostO" != "" ]]; then
                HOST="${hostO#*@}"
                CRED="${hostO%%@*}"
                break;
            #
            elif [[ "$hostR" != "" ]]; then
                HOST="${hostR#*@}"
                CRED="${hostR%%@*}"
                break;
            fi;;
        esac
    done
}
main(){
    #if host 
    if [[ "$HOST" != "${HOST%:*}" ]]; then 
        PORT=${HOST%:*}
        HOST=${HOST##*:}
    fi
    if [[ "$HOST" == "" ]]; then 
        select_host
    else
        known_host=$(known_host $HOST)
    fi
    if [ -n "$known_host" ]; then
        HOST="${known_host##*@}"
        CRED="${known_host%@*}"
    fi
    #if cred is the same as host    
    [[ "$CRED" == "$" ]] && CRED="" || CRED="$CRED@"

    if test_host "$HOST" 1>/dev/null; then
        echo "Opening vnc to $CRED$HOST on port $PORT"
        open vnc://"$CRED$HOST:$PORT"
    else
        #Red error message
        echo -e "\033[31mVNC port ($PORT) not open on $HOST\033[30m"
        return 1;
    fi
}

main