
snippet php
	<?php
	${1}
	?>
snippet phpi
	?>
	${1}
	<?php
snippet php=
	<?=${1}?>
snippet ec
	echo "${1:string}"${2};
snippet inc
	include '${1:file}';${2}
snippet inc1
	include_once '${1:file}';${2}
snippet req
	require '${1:file}';${2}
snippet req1
	require_once '${1:file}';${2}
# $GLOBALS['...']
snippet globals
	$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${5}
snippet $_ COOKIE['...']
	$_COOKIE['${1:variable}']${2}
snippet $_ ENV['...']
	$_ENV['${1:variable}']${2}
snippet $_ FILES['...']
	$_FILES['${1:variable}']${2}
snippet $_ Get['...']
	$_GET['${1:variable}']${2}
snippet $_ POST['...']
	$_POST['${1:variable}']${2}
snippet $_ REQUEST['...']
	$_REQUEST['${1:variable}']${2}
snippet $_ SERVER['...']
	$_SERVER['${1:variable}']${2}
snippet $_ SESSION['...']
	$_SESSION['${1:variable}']${2}
# Start Docblock
snippet /*
	/**
	 * ${1}
	 **/
# Class - post doc
snippet doc_cp
	/**
	 * ${1:undocumented class}
	 *
	 * @package ${2:default}
	 * @author ${3:`g:snips_author`}
	**/${4}
# Class Variable - post doc
snippet doc_vp
	/**
	 * ${1:undocumented class variable}
	 *
	 * @var ${2:string}
	 **/${3}
# Class Variable
snippet doc_v
	/**
	 * ${3:undocumented class variable}
	 *
	 * @var ${4:string}
	 **/
	${1:var} $${2};${5}
# Class
snippet doc_c
	/**
	 * ${3:undocumented class}
	 *
	 * @packaged ${4:default}
	 * @author ${5:`g:snips_author`}
	 **/
	${1:}class ${2:}
	{${6}
	} // END $1class $2
# Constant Definition - post doc
snippet doc_dp
	/**
	 * ${1:undocumented constant}
	 **/${2}
# Constant Definition
snippet doc_d
	/**
	 * ${3:undocumented constant}
	 **/
	define(${1}, ${2});${4}
# Function - post doc
snippet doc_fp
	/**
	 * ${1:undocumented function}
	 *
	 * @return ${2:void}
	 * @author ${3:`g:snips_author`}
	 **/${4}
# Function signature
snippet doc_s
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 **/
	${1}function ${2}(${3});${7}
# Function
snippet doc_f
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 **/
	${1}function ${2}(${3})
	{${7}
	}
# Header
snippet doc_h
	/**
	 * ${1}
	 *
	 * @author ${2:`g:snips_author`}
	 * @version ${3:$Id$}
	 * @copyright ${4:$2}, `strftime('%d %B, %Y')`
	 * @package ${5:default}
	 **/
	
	/**
	 * Define DocBlock
	 *//
# Interface
snippet doc_i
	/**
	 * ${2:undocumented class}
	 *
	 * @package ${3:default}
	 * @author ${4:`g:snips_author`}
	 **/
	interface ${1:}
	{${5}
	} // END interface $1
# class ...
snippet class
	/**
	 * ${1}
	 **/
	class ${2:ClassName}
	{
		${3}
		function ${4:__construct}(${5:argument})
		{
			${6:// code...}
		}
	}
# define(...)
snippet def
	define('${1}'${2});${3}
# defined(...)
snippet def?
	${1}defined('${2}')${3}
snippet wh
	while (${1:/* condition */}) {
		${2:// code...}
	}
# do ... while
snippet do
	do {
		${2:// code... }
	} while (${1:/* condition */});
snippet if
	if (${1:/* condition */}) {
		${2:// code...}
	}
snippet ife
	if (${1:/* condition */}) {
		${2:// code...}
	} else {
		${3:// code...}
	}
	${4}
snippet else
	else {
		${1:// code...}
	}
snippet elseif
	elseif (${1:/* condition */}) {
		${2:// code...}
	}
# Tertiary conditional
snippet t
	$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
snippet switch
	switch ($${1:variable}) {
		case '${2:value}':
			${3:// code...}
			break;
		${5}
		default:
			${4:// code...}
			break;
	}
snippet case
	case '${1:value}':
		${2:// code...}
		break;${3}
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4: // code...}
	}
snippet foreach
	foreach ($${1:variable} as $${2:key}) {
		${3:// code...}
	}
snippet fun
	${1:public }function ${2:FunctionName}(${3})
	{
		${4:// code...}
	}
# $... = array (...)
snippet array
	$${1:arrayName} = array('${2}' => ${3});${4}

snippet widget
	/*
	Plugin Name: $2
	Plugin URI: `g:snips_authorgit`wordpress_plugins/  
	Description: $3
	Version: 0.0.0
	Author: `g:snips_author`
	Author URI:`g:snips_authorsite`
	License: GPL

	This software comes without any warranty, express or otherwise, and if it
	breaks your blog or results in your cat being shaved, it's not my fault.

	*/
	function widget_$1_init(){

		$id = "${1:`Filename()`}";
		$label = "${2:Label}`";
		$desc = "${3:Description}";
		$call = "widget_$1";
		$ctrl = "widget_$1_ctrl";

		if ( !function_exists('register_sidebar_widget') )
			return;
		//Widget
		function widget_$1($args){
			extract($args);
			extract($opt = get_option('$1'));
			$widgetFmt = "$before_widget$before_title$title".'%1$s'."$after_title<ul>\n".'%2$s'."</ul>$after_widget\n";
			$itemFmt = '<li%2$s>%1$s</li>'."\n";
			$items = array();
			$label = "";

			//Insert Error Conditions/Messages if needed

			printf($widgetFmt, $label, implode("", $items));
		}
		//Controller
		function widget_$1_ctrl(){
			//Add if checkbox
			$checkboxes = array();
			//overwrite option label with kv pair;
			$labels = array();
			
			//Options?defaults
			extract($opt = get_option($o = '$1'));
			if (!is_array($opt)) $opt = array(
				""=>""
			);
			
			//If form posted, set options
			if (isset($_POST[$1-submit]) foreach($opt as $k => $v){
				$opt[$k] = strip_tags(stripslashes($_POST[$k]));
				update_option($o, $opt);
			}
			
			//formatter string for form elements
			//%1 = k, %2 = formatted k, %3 = value or ?"checked='checked'":""
			$txt = '<p><label for="%1$s">%2$s</label><input class="widefat" id="%1$s" name="%1$s" type="text" value="%3$s" /></p>';
			$cb = '<p><input id="%1$s" name="%1$s" type="checkbox" value="1" %3$s /><label for="%1$s">%2$s</label></p>';
			
			//Create form elements for the options
			foreach($opt as $k => $v){
				$v = htmlspecialchars($v, ENT_QUOTES);
				$label = __(ucwords(str_replace("_", " ", (isset($labels[$k])?$labels[$k]:$k))));
				if(in_array($k, $checkboxes))
					printf($cb, $k, $label, ($v?"checked='checked'":""));
				else
					printf($txt, $k, "$label:", $v);
			}
			echo '<p><input type="hidden" id="submit" name="$1-submit" value="1" /></p>';
		}

		wp_register_sidebar_widget( $id, $label, $call, array('description'=>$desc));
		wp_register_widget_control( $id, $label, $ctrl, array('description'=>$desc));
	}

	// Run code and init
	add_action('widgets_init', 'widget_$1_init');

	?>
